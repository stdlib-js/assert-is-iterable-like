{"version":3,"file":"index.mjs","sources":["../lib/index.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is iterable-like.\n*\n* @module @stdlib/assert-is-iterable-like\n*\n* @example\n* import isIterableLike from '@stdlib/assert-is-iterable-like';\n*\n* var bool = isIterableLike( [] );\n* // returns <boolean>\n*\n* bool = isIterableLike( {} );\n* // returns false\n*/\n\n// MODULES //\n\nimport hasIteratorSymbolSupport from '@stdlib/assert-has-iterator-symbol-support';\nimport constantFunction from '@stdlib/utils-constant-function';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar isIterable;\nif ( hasIteratorSymbolSupport() ) {\n\tisIterable = main;\n} else {\n\tisIterable = constantFunction( false );\n}\n\n\n// EXPORTS //\n\nexport default isIterable;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPrimitive from '@stdlib/assert-is-primitive';\nimport isFunction from '@stdlib/assert-is-function';\nimport ITERATOR from '@stdlib/symbol-iterator';\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\n\n\n// MAIN //\n\n/**\n* Tests if a value is iterable-like.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether a value is iterable-like\n*\n* @example\n* var bool = isIterableLike( [] );\n* // returns <boolean>\n*\n* @example\n* var bool = isIterableLike( {} );\n* // returns false\n*\n* @example\n* var bool = isIterableLike( null );\n* // returns false\n*/\nfunction isIterableLike( value ) {\n\tvar f;\n\tif ( isPrimitive( value ) ) {\n\t\treturn false;\n\t}\n\tf = value[ ITERATOR ];\n\treturn (\n\t    // Why this form? In order to preserve `this`.\n\t\t(isFunction( f ) &&\n\t\tf.length === 0 && isIteratorLike( value[ ITERATOR ]() ))\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isIterableLike;\n"],"names":["isIterable$1","hasIteratorSymbolSupport","value","f","isPrimitive","ITERATOR","isFunction","length","isIteratorLike","constantFunction"],"mappings":";;skBA4CA,IAUAA,EATKC,ICGL,SAAyBC,GACxB,IAAIC,EACJ,OAAKC,EAAaF,KAGlBC,EAAID,EAAOG,GAGTC,EAAYH,IACA,IAAbA,EAAEI,QAAgBC,EAAgBN,EAAOG,MAE3C,EDXcI,GAAkB"}